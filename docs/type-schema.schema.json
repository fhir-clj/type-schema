{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$comment": "$id: http://health-samurai.io/schemas/type-schema.schema.json/0.0.0.1",
  "type": "object",
  "title": "Type Schema",
  "description": "FHIR StructureDefinition & FHIR Schema view for generation SDK resource classes/types.",
  "definitions": {
    "type-schema-ref": {
      "type": "object",
      "$comment": "TODO: Do we need kind here? It may raise consistency issues.",
      "properties": {
        "package": { "type": "string" },
        "name": { "type": "string", "description": "Computer friendly" },
        "url": {
          "type": "string",
          "pattern": "^(https?://|urn:)[^\\s]+$",
          "description": "A canonical URL to identifying this resource"
        }
      },
      "required": ["package", "name"]
    }
  },
  "oneOf": [
    {
      "title": "Type Schema for Primitive Type",
      "type": "object",
      "properties": {
        "kind": { "const": "primitive-type" },
        "name": {
          "type": "string",
          "description": "Computer friendly name for the type"
        },
        "description": {
          "type": "string"
        },
        "self-reference": {
          "$comment": "Early -- name, but it should be used as a reference to the type.",
          "$ref": "#/definitions/type-schema-ref"
        },
        "base": {
          "$ref": "#/definitions/type-schema-ref"
        }
      },
      "required": ["kind", "name", "self-reference", "base"],
      "additionalProperties": false
    },

    {
      "title": "Type Schema for ValueSet",
      "type": "object",
      "properties": {
        "kind": {
          "const": "value-set"
        },
        "name": {
          "type": "string",
          "description": "Computer friendly name for the type"
        },
        "self-reference": {
          "$comment": "Early -- name, but it should be used as a reference to the type.",
          "$ref": "#/definitions/type-schema-ref"
        },
        "coding": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": { "type": "string" },
              "display": { "type": "string" },
              "system": { "type": "string" }
            },
            "required": ["code"],
            "additionalProperties": false
          }
        },
        "compose": { "type": "object" }
      },
      "required": ["kind", "name", "self-reference"],
      "additionalProperties": false
    },

    {
      "type": "object",
      "properties": {
        "kind": {
          "oneOf": [{ "const": "resource" }, { "const": "complex-type" }]
        },
        "name": {
          "type": "string",
          "description": "Computer friendly name for the type"
        },
        "self-reference": {
          "$comment": "Early -- name, but it should be used as a reference to the type.",
          "$ref": "#/definitions/type-schema-ref"
        },
        "base": {
          "$ref": "#/definitions/type-schema-ref"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "required": { "type": "boolean", "default": false },
                  "array": { "type": "boolean", "default": false },
                  "type": {
                    "$ref": "#/definitions/type-schema-ref"
                  },
                  "binding": {
                    "type": "object",
                    "$comment": "https://build.fhir.org/terminologies-binding-examples.html",
                    "properties": {
                      "valueSet": {
                        "$ref": "#/definitions/type-schema-ref"
                      },
                      "strength": {
                        "type": "string",
                        "enum": [
                          "required",
                          "extensible",
                          "preferred",
                          "example"
                        ]
                      }
                    }
                  }
                },
                "required": ["type"]
              },
              {
                "type": "object",
                "description": "Polymorphic value[x] declaration",
                "properties": {
                  "choices": { "type": "array", "items": { "type": "string" } },
                  "required": {
                    "type": "boolean",
                    "description": "== .fields.<choice>[*].required",
                    "default": false
                  },
                  "array": {
                    "type": "boolean",
                    "description": "== .fields.<choice>[*].array",
                    "default": false
                  }
                },
                "required": ["choices"]
              },
              {
                "type": "object",
                "description": "Instance of polymorphic value[x] field",
                "properties": {
                  "choiceOf": { "type": "string" },
                  "required": {
                    "type": "boolean",
                    "description": "== .fields.<choiceOf>.required",
                    "default": false
                  },
                  "array": {
                    "type": "boolean",
                    "description": "== .fields.<choiceOf>.array",
                    "default": false
                  },
                  "type": {
                    "$ref": "#/definitions/type-schema-ref"
                  }
                },
                "required": ["type"]
              }
            ]
          }
        },
        "allDependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/type-schema-ref"
          }
        },
        "nestedTypesFlat": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "array",
                "description": "Start from the # type to simplify name generation.",
                "items": { "type": "string" }
              },
              "type": { "$ref": "#" }
            },
            "required": ["type", "path"]
          }
        }
      },
      "required": ["kind", "name", "nestedTypesFlat"],
      "additionalProperties": false
    }
  ]
}
